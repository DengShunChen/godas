#!/bin/bash -l
set -x

cat <<EOF
#================================================================================
#================================================================================
# JJOB_DA_PREP
#   Prepare yaml files for SOCA applications 
#================================================================================
#================================================================================
EOF

module purge
source $MOD_PATH/godas.main
module list

#############################
## Source relevant config files
##############################
configs="base"
config_path=$EXPDIR
for config in $configs; do
    . $config_path/config.$config
    status=$?
    [[ $status -ne 0 ]] && exit $status
done

##############################################
# Obtain unique process id (pid) and make temp directory
##############################################
export jobid=${job}.${PBS_JOBID:-$$}
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
export DATA=${DATA:-${DATAROOT}/${jobid:?}}
mkdir -p $DATA
cd $DATA

###############################################
## Run setpdy and initialize PDY variables
###############################################
export cycle="t${cyc}z"
setpdy.sh
. ./PDY

##############################################
## Determine Job Output Name on System
###############################################
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

###############################################
## Set variables used in the exglobal script
###############################################
export CDATE=${CDATE:-${PDY}${cyc}}
export CDUMP=${CDUMP:-"godas"}
export RUN=${RUN:-"data"}

###############################################
echo  
echo "The system runs at $DATA"
echo
echo "Root GODAS " ${ROOT_GODAS_DIR}
echo
echo "SOCA_STATIC="$SOCA_STATIC

COMIN=$ROTDIR/$CDUMP.$PDY/$cyc/
COMOUT=$ROTDIR/$CDUMP.$PDY/$cyc/

# TODO: Hard-coded stuff that needs to be moved/changed
export MODEL_SCRATCH=/scratch2/NCEPDEV/ocean/Guillaume.Vernieres/mom6-cice5-fv3/${NI}x${NJ}x${NK}
# TODO: Put the job files for the ensemble to a temporary job-dir

cdate2window_begin(){ echo ${1:0:4}-${1:4:2}-${1:6:2}T00:00:00Z; }  # TODO: Hardcoded for 24hr DA window,
cdate2bkg_date(){ echo ${1:0:4}-${1:4:2}-${1:6:2}T12:00:00Z; }          # make generic.

# Make sure CDATE is at 12z
cdate_hh(){ echo  ${1:8:2}; }
if [ $(cdate_hh $CDATE) -eq 12 ]; then
    echo "Setting SOCA config for 24hr DA window"
else
    echo "Background date needs to be at 12Z"
    echo "CDATE="$CDATE
    exit 1
fi

# Copy SOCA static files into $DATA
#---------------------------------------------------
cp -r $SOCA_STATIC/* $DATA

# Copy SOCA config files into $DATA
#----------------------------------------------------
mkdir -p $DATA/yaml
cp -r $SOCA_CONFIG/*.yml $DATA/yaml

# Prepare SOCA configuration
#-----------------------------------------
export window_begin=$(cdate2window_begin $CDATE)
export bkg_date=$(cdate2bkg_date $CDATE)

if [ $godas_cyc = "1" ]; then
    export window_length=PT24H
else
    echo "godas_cyc not valid"
    exit 1
fi
echo "window_begin="$window_begin
echo "window_length="$window_length
echo "bkg_date="$bkg_date
echo "MODEL_SCRATCH="$MODEL_SCRATCH

## Prep yaml for bump correlation initialization 
#-----------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $DATA/yaml/static_SocaError_init.yml  \
      -d ${bkg_date}

## Prep yaml for bump localization initialization 
#------------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $DATA/yaml/parameters_bump_loc.yml    \
      -d ${bkg_date}

## Prep yaml for checkpointing 3DVAR analysis
#--------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $DATA/yaml/checkpointmodel.yml        \
      -d ${bkg_date}

## Prep yaml for running mom6 only forecast
#------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $DATA/yaml/forecast.yml               \
      -d ${bkg_date}

## Prep yaml for the soca_enspert 
#-----------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $DATA/yaml/genenspert.yml               \
      -d ${bkg_date}

${ROOT_GODAS_DIR}/scripts/replace_KWRD_yaml.sh     \
      -i $DATA/yaml/genenspert.yml               \
      -k NO_ENS_MBR                                \
      -v ${NO_ENS_MBR}

## Prep yaml for the soca_enspert for envar 
#--------------------------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $DATA/yaml/genenspert4envar.yml       \
      -d ${bkg_date}

${ROOT_GODAS_DIR}/scripts/replace_KWRD_yaml.sh     \
      -i $DATA/yaml/genenspert4envar.yml       \
      -k NO_ENS_MBR                                \
      -v ${NO_ENS_MBR}

${ROOT_GODAS_DIR}/scripts/replace_KWRD_yaml.sh     \
      -i $DATA/yaml/genenspert4envar.yml       \
      -k WINDOW_LENGTH                             \
      -v ${window_length}

# Prep yaml for 3dvar 
#-----------------------------
${ROOT_GODAS_DIR}/scripts/prep_3dvar_yaml.sh       \
      -i $DATA/yaml/3dvar_godas.yml            \
      -d $DATA

# Prep yaml for 3denvar 
#----------------------------------
${ROOT_GODAS_DIR}/scripts/prep_3denvar_yaml.sh    \
      -i $DATA/yaml/3dhybenvar.yml            \
      -m $DATA/yaml/envar_member.yml          \
      -d $DATA                                \
      -n ${NO_ENS_MBR}

# Prep yaml for ensemble variance
#------------------------------------------------
# TODO: Not clean, using prep_3denvar_yaml.sh to create ens. variance yaml
${ROOT_GODAS_DIR}/scripts/prep_3denvar_yaml.sh    \
      -i $DATA/yaml/ensvariance.yml            \
      -m $DATA/yaml/ensvariance_member.yml          \
      -d $DATA                                \
      -n ${NO_ENS_MBR}


#----------------------------------
if [ $DA_METHOD = 'letkf' ]; then 
   for (( mbr=1; mbr<=${NO_ENS_MBR} ; mbr++ )); do
      
      yaml_tmp=$DATA/yaml/hofx3d${mbr}.yml 
      cp -r $DATA/yaml/hofx3d.yml ${yaml_tmp}
   
      ${ROOT_GODAS_DIR}/scripts/prep_hofx3d_yaml.sh   \
         -i ${yaml_tmp}                               \
         -d ${DATA}                               \
         -n ${mbr}
      
      jjob_tmp=${ROOT_GODAS_DIR}/jobs/JJOB_PREP_LETKF${mbr}
      cp -f ${ROOT_GODAS_DIR}/jobs/JJOB_PREP_LETKF ${jjob_tmp}
      sed -i "s/MEMBER_NO/${mbr}/g" ${jjob_tmp}
   done
fi

# TODO: Prep yaml for letkf 
#----------------------------------

# Get IC
#-------
# Check if there was a previous cycle
if [ -d ../NEXT_IC ]; then
    # Get IC from previous cycle
    cp ../NEXT_IC/cice_bkg.nc $DATA/INPUT_MOM6/cice_bkg.nc  
    cp ../NEXT_IC/MOM*.nc $DATA/INPUT_MOM6/

    if [ -d ../NEXT_ENS ]; then
	mv ../NEXT_ENS/* $DATA/Data/
    fi
    rm -rf ../NEXT_ENS
    rm -rf ../NEXT_IC
fi

# If this is the first cycle, continue below
# TODO: This is a hack ... in case you had not noticed!
# Ocean bkg files
#----------------
ln -sf $MODEL_SCRATCH/INPUT/MOM.res*.nc $DATA/INPUT_MOM6/

# Initial Ocean and Ice perturbations
#---------------------------------------------------
ln -sf $MODEL_SCRATCH/ens/*.nc $DATA/Data/

# Sea-ice bkg files
#------------------
if [ "${ICE_FMT}" = notfms ]; then
    # Get bkg sea-ice file. TODO: HH IS HARDCODED!!!!
    cp $MODEL_SCRATCH/restart/iced.2011-10-01-43200.nc $DATA/INPUT_MOM6/cice_bkg.nc
    # Make cice_bkg.nc fms compliant
    ncks -O -C -v aicen,vicen,vsnon ./INPUT_MOM6/cice_bkg.nc $DATA/INPUT_MOM6/cice_bkg.nc
    ncrename -O -d ni,xaxis_1 -d nj,yaxis_1 -d ncat,zaxis_1 $DATA/INPUT_MOM6/cice_bkg.nc
    ncecat -O -v aicen,vicen,vsnon -u Time $DATA/INPUT_MOM6/cice_bkg.nc $DATA/INPUT_MOM6/cice_bkg.nc
    ncks -A -v Time,xaxis_1,yaxis_1,zaxis_1 $DATA/INPUT_MOM6/ice_model.res.nc $DATA/INPUT_MOM6/cice_bkg.nc
fi
if [ "${ICE_FMT}" = fms ]; then
    cp $MODEL_SCRATCH/INPUT/cice_bkg.nc $DATA/INPUT_MOM6/cice_bkg.nc
fi

cp -r $DATA/INPUT $COMOUT
cp -r $DATA/INPUT_MOM6 $COMOUT
cp -r $DATA/godas_sst_bgerr.nc $COMOUT
cp -r $DATA/geom_output.nc $COMOUT
cp -r $DATA/yaml $COMOUT
cp -r $DATA/input* $COMOUT
cp -r $DATA/rossrad.dat $COMOUT
cp -r $DATA/field_table $COMOUT
cp -r $DATA/ens $COMOUT
cp -r $DATA/diag_table $COMOUT
cp -r $DATA/data_table $COMOUT
