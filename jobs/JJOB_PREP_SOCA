#!/bin/bash
set -x

cat <<EOF
#================================================================================
#================================================================================
# JJOB_PREP_SOCA
#   Prep SOCA Static B and grid
#================================================================================
#================================================================================
EOF

module purge
source $MOD_PATH/godas.main
module list

#############################
## Source relevant config files
##############################

configs="base"
config_path=$EXPDIR
for config in $configs; do
    . $config_path/config.$config
    status=$?
    [[ $status -ne 0 ]] && exit $status
done

##############################################
# Obtain unique process id (pid) and make temp directory
##############################################

export jobid=${job}.${PBS_JOBID:-$$}
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
export DATA=${DATA:-${DATAROOT}/${jobid:?}}
mkdir -p $DATA
cd $DATA

###############################################
## Run setpdy and initialize PDY variables
###############################################

export cycle="t${cyc}z"
setpdy.sh
. ./PDY

##############################################
## Determine Job Output Name on System
###############################################
export pgmout="OUTPUT.${pid}"
export pgmerr=errfile

###############################################
## Set variables used in the exglobal script
###############################################
export CDATE=${CDATE:-${PDY}${cyc}}
export CDUMP=${CDUMP:-"godas"}
export RUN=${RUN:-"data"}

###############################################
echo  
echo "The system runs at $DATA"
echo "COMIN $ROTDIR/$CDUMP.$PDY/$cyc/"
echo
echo "Root GODAS " ${ROOT_GODAS_DIR}
echo
echo "SOCA_STATIC="$SOCA_STATIC

COMIN=$ROTDIR/$CDUMP.$PDY/$cyc/
COMOUT=$ROTDIR/$CDUMP.$PDY/$cyc/

if [ ! -d $COMIN ]; then mkdir -p $COMIN; fi
cd $DATA
ln -s $COMIN/* .

# Generate ocean-ice grid
if [ -f "${COMIN}/soca_gridspec.nc" ]; then
    echo
    echo 'SOCA grid exist, by-passing grid generation.'
    echo
else
    echo
    echo 'No grid found. Generating SOCA grid.'
    echo
    srun -n $NPE ${SOCA_EXEC}/soca_gridgen.x ./yaml/gridgen.yml
fi

# Create BUMP convolution operator (computes convolution weights)
echo
echo 'Initializing BUMP.'
echo
mkdir -p bump
srun -n $NPE ${SOCA_EXEC}/soca_staticbinit.x ./yaml/static_SocaError_init.yml

# Initialize BUMP localization (computes localization weights)
if [ ${NO_ENS_MBR}>1 ]; then
    echo
    echo 'Initializing BUMP Localization.'
    echo
    srun -n $NPE ${SOCA_EXEC}/soca_parameters.x ./yaml/parameters_bump_loc.yml
fi

cp -r $DATA/Vertical_coordinate.nc $COMOUT
cp -r $DATA/soca_gridspec.nc $COMOUT
cp -r $DATA/available_diags.000000 $COMOUT
cp -r $DATA/MOM_parameter_doc.short $COMOUT
cp -r $DATA/MOM_parameter_doc.layout $COMOUT
cp -r $DATA/MOM_parameter_doc.debugging $COMOUT
cp -r $DATA/MOM_parameter_doc.all $COMOUT
cp -r $DATA/bump $COMOUT
